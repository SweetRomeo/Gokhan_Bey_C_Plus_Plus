/*---------------------------------------------------------
Örnek Soru 2:Parametresiyle aldığı int türden bir sayının basamak
sayısını geri döndüren getDigitsCount isimli fonksiyonu yazınız ve test ediniz.
12 -> 2
123 -> 3
0 -> 1
----------------------------------------------------------*/
#include <iostream>
#include <cmath>

int calculatePower(int a = 1,int n = 1)
{
    int result = 1;
    while(n--){
        result *= a;
    }
    return result;
}

int main()
{
    int a,n;
    std::cout << "iki sayi giriniz" << '\n';
    std::cin >> a >> n;
    std::cout << "result : " << calculatePower(a,n) <<'\n';
    std::cout << "result : " << pow(a,n) << '\n';
}
/*---------------------------------------------------------
Örnek Soru 4:Bir sayının her bir basamağının sayı değerleri
sayının toplam basamak sayıncı kuvvetleri toplamı kendisine
eşit olan sayılara Armstrong sayısı veya narsistik denir.
Örneğin 371 sayısı bir narsistik sayıdır:
371 = 3 ^ 3 + 7 ^ 3 + 1 ^ 3
(Örnek 1,2 ve 3'ten faydalanınız.)
Açıklama bir sayının Armstrong sayısı olup olmadığını geri
döndüren isArmstrong isimli fonksiyonu yazınız ve test ediniz.
----------------------------------------------------------*/
/*---------------------------------------------------------
Örnek Soru 2:Parametresiyle aldığı int türden bir sayının basamak
sayısını geri döndüren getDigitsCount isimli fonksiyonu yazınız ve test ediniz.
12 -> 2
123 -> 3
0 -> 1
----------------------------------------------------------*/
#include <iostream>
#include <cmath>


int getDigitsCount(int val)
{
    if(val == 0)
        return 1;
    int count = 0;
    while(val){
        count++;
        val /= 10;
    }
    return count;
}

int calculatePower(int a = 1,int n = 1)
{
    int result = 1;
    while(n--){
        result *= a;
    }
    return result;
}
bool isArmstrong(int val)
{
    int temp = val,sum = 0;
    while(val){
        sum += calculatePower(val % 10, getDigitsCount(temp));
        val /= 10;
    }
    return temp == sum;
}

int main()
{
    for(int i = 0;i < 100000;++i){
        if(isArmstrong(i)){
            std::cout << i << ' ';
        }
    }
}
//----------------------------------------------------------
//Başka bir çözüm
/*---------------------------------------------------------
Örnek Soru 2:Parametresiyle aldığı int türden bir sayının basamak
sayısını geri döndüren getDigitsCount isimli fonksiyonu yazınız ve test ediniz.
12 -> 2
123 -> 3
0 -> 1
----------------------------------------------------------*/
#include <iostream>
#include <cmath>


int getDigitsCount(int val)
{
    if(val == 0)
        return 1;
    int count = 0;
    while(val){
        count++;
        val /= 10;
    }
    return count;
}

int calculatePower(int a = 1,int n = 1)
{
    int result = 1;
    while(n--){
        result *= a;
    }
    return result;
}
bool isArmstrong(int val)
{
    int temp = val,sum = 0;
    int count = getDigitsCount(val);
    while(val){
        sum += calculatePower(val % 10, count);
        val /= 10;
    }
    return temp == sum;
}

int main()
{
    for(int i = 0;i < 100000;++i){
        if(isArmstrong(i)){
            std::cout << i << ' ';
        }
    }
}
//----------------------------------------------------------
//Başka bir çözüm
/*---------------------------------------------------------
Örnek Soru 2:Parametresiyle aldığı int türden bir sayının basamak
sayısını geri döndüren getDigitsCount isimli fonksiyonu yazınız ve test ediniz.
12 -> 2
123 -> 3
0 -> 1
----------------------------------------------------------*/
#include <iostream>
#include <cmath>


int getDigitsCount(int val)
{
    if(val == 0)
        return 1;
    int count = 0;
    while(val){
        count++;
        val /= 10;
    }
    return count;
}

int calculatePower(int a = 1,int n = 1)
{
    int result = 1;
    while(n--){
        result *= a;
    }
    return result;
}
bool isArmstrong(int val)
{
    int temp = val,sum = 0;
    for(int count = getDigitsCount(temp);val;val /= 10){
        sum += calculatePower(val % 10, count);
    }
    return temp == sum;
}

int main()
{
    for(int i = 0;i < 100000;++i){
        if(isArmstrong(i)){
            std::cout << i << ' ';
        }
    }
}
/*----------------------------------------------------------
Örnek Soru isPrime algoritması
-----------------------------------------------------------*/
/*----------------------------------------------------------
Örnek Soru isPrime algoritması yavaş versiyon
-----------------------------------------------------------*/
#include <iostream>


bool isPrime(int val)
{
    if(val <= 1)
        return false;
    int half_val = val / 2;
    for(int i = 2;i <= half_val;++i){
        if(val % i == 0)
            return false;
    }
    return true;
}


int main()
{
    for(int i = 0;i < 200;++i){
        if(isPrime(i)){
            std::cout << i << ' ';
        }
    }
}
/*-------------------------------------------------------
Teorem: Eğer sayı karekökünden küçük olan tüm sayıları tam
bölünemiyorsa asaldır.
--------------------------------------------------------*/
/*----------------------------------------------------------
Örnek Soru isPrime algoritması
 Teorem: Eğer sayı karekökünden küçük olan tüm sayıları tam
bölünemiyorsa asaldır. (Hızlı versiyon)
-----------------------------------------------------------*/
#include <iostream>


bool isPrime(int val)
{
    if(val <= 1)
        return false;
    if(val % 2 == 0)
        return val == 2;
    if(val % 3 == 0)
        return val == 3;
    if(val % 5 == 0)
        return val == 5;
    if(val % 7 == 0)
        return val == 7;
    for(int i = 11;i * i < val;i += 2){
        if(val % i == 0)
            return false;
    }
    return true;
}


int main()
{
    for(int i = 0;i < 100000;++i){
        if(isPrime(i)){
            std::cout << i << ' ';
        }
    }
}
/*----------------------------------------------------------

-----------------------------------------------------------*/
#include <iostream>

using namespace std;

class printDiamond{
public:
    static void run(const int& n){
        int x = 0;
        bool flag = true;
        while(true){
            for (int i = 0; i < n - x - 1; ++i) {
                cout << ' ';
            }
            for (int i = 0; i < 2 * x + 1; ++i) {
                cout << '*';
            }
            if(flag)
                ++x;
            else
                --x;
            if(x == n - 1)
                flag = false;
            if(x < 0)
                break;
            cout << '\n';
        }
    }
    static void printDiamondTest()
    {
        int n;
        cout << "n degerini giriniz" << '\n';
        cin >> n;
        run(n);
    }
};


int main()
{
    printDiamond::printDiamondTest();
}
0 -> false
non-zero değerler -> true
-1 -> true
//--------------------------------------------------------
#include <iostream>

using namespace std;

class BallShape{
public:
    static void run(int& height,int& width)
    {
        int BallIndex = 0;
        bool directionFlag = true;
        while (height--){
            cout << '|';
            for (int i = 0; i < BallIndex; ++i) {
                cout << ' ';
            }
            cout << '*';
            for(int i = BallIndex;i < width - 1;++i){
                cout << ' ';
            }
            cout << '|' << '\n';
            if(directionFlag && BallIndex == width - 1)
                directionFlag = false;
            else if(!directionFlag && BallIndex == 0)
                directionFlag = true;
            if(directionFlag)
                BallIndex++;
            else
                BallIndex--;
        }
    }
    static void BallShapeTest()
    {
        int height,width;
        cout << "Enter Height?" << '\n';
        cin >> height;
        cout << "Enter width?" << '\n';
        cin >> width;
        run(height,width);
    }
};


int main()
{
    BallShape::BallShapeTest();
}
/*----------------------------------------------------------
do-while döngü deyiminin babadan kalma while döngü deyiminden
 farkı do-while döngüsünün 1 defa döneceği garanti altında
2 tip while döngüsü vardır:
 1-)Kontrolün başta yapıldığı(while)
 while(<ifade>){
    //code
 }
 2-)Kontrolün sonda yapıldığı(do-while)
 do{
    //code
 }while(<ifade>);
-----------------------------------------------------------*/
#include <iostream>

int getDigitsCount(int val)
{
    int count = 0;
    do{
        count++;
        val /= 10;
    } while (val);

    return count;
}

int main()
{
    int val;
    std::cout << "Bir sayi giriniz?\n";
    std::cin >> val;
    std::cout << "result : " << getDigitsCount(val) << '\n';
}
//------------------------------------------------------------------------
#include <iostream>
#include <vector>

template<typename Iter>
void print(Iter beg,Iter end)
{
    while(beg != end){
        std::cout << *beg++ << ' ';
    }
    std::cout << '\n';
}


int main()
{
    using namespace std;
    int arr[20];
    vector<int> ivec{};
    for(int i = 0;i < 10;++i){
        ivec.push_back(i);
        getchar();
        print(ivec.begin(),ivec.end());
        std::cout << "size : "<< ivec.size() << '\n';
        std::cout << "capacity :" << ivec.capacity() << '\n';
    }

    cout << "\n**************" << '\n';

    for(int i = 0;i < 10;++i){
        ivec.pop_back();
        getchar();
        print(ivec.begin(),ivec.end());
        std::cout << "size : "<< ivec.size() << '\n';
        std::cout << "capacity :" << ivec.capacity() << '\n';
    }
}
12 5 6 15 78 9
5 12 6 15 78 9
5 6 12 15 78 9
5 6 12 15 78 9
5 6 12 15 78 9
5 6 12 15 9 78
/*--------------------------------------------------------
bubbleSort fonksiyonu ve test kodu
-------------------------------------------------------*/
#include <iostream>
#include <vector>

void swap(int& a,int& b)
{
    int temp = a;
    a = b;
    b = temp;
}

void bubbleSort(int* arr,int size)
{
    for(int i = 0;i < size - 1;++i){
        for(int k = 0;k < size - i - 1;++k){
            if(arr[k] > arr[k + 1]){
                swap(arr[k],arr[k + 1]);
            }
        }
    }
}
void print(int arr[],int size){
    for (int i = 0; i < size; ++i) {
        std::cout << arr[i] << ' ';
    }
    std::cout << '\n';
}


int main()
{
    using namespace std;
    int arr[]{12,5,6,15,78,9};
    int size = sizeof(arr)/ sizeof(arr[0]);
    print(arr,size);
    bubbleSort(arr,size);
    print(arr,size);
}
12 5 6 15 78 9
12 5 6 15 9 78
12 5 6 9 15 78
//----------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <string>
#include <cstdlib>
#include <ctime>
#define randomize() srand(time(nullptr))

using namespace std;

template<typename Iter>
void print(Iter beg,Iter end)
{
    while(beg != end){
        cout << *beg++ << ' ';
    }
    cout << '\n';
}



int main()
{
    randomize();
    vector<pair<string,int>> Persons{{"berke",23},{"gokhan",45}};
    vector<int> ivec{12,34,56,78,97,108};
    for(auto [Person,id]: Persons)
        cout << "name : " <<Person << " Id : " << id << '\n';
    print(ivec.begin(),ivec.end());

    for(int i = 0;i < 10;++i){
        ivec.push_back(rand() % 100);
        getchar();
        print(ivec.begin(),ivec.end());
    }



    for(int i = 0;i < 10;++i){
        ivec.pop_back();
        getchar();
        print(ivec.begin(),ivec.end());
    }

    int val;
    cout << "Cikarilacak elemani giriniz : \n";
    cin >> val;
    for(auto iter = ivec.begin();iter != ivec.end();++iter){
        if(*iter == val){
            ivec.erase(iter);
        }
    }
    print(ivec.begin(),ivec.end());
}